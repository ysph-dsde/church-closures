[
  {
    "objectID": "Pages/Cleaning and Harmonization.html",
    "href": "Pages/Cleaning and Harmonization.html",
    "title": "Cleaning and Validation",
    "section": "",
    "text": "THIS PAGES IS IN PROGRESS"
  },
  {
    "objectID": "Pages/Cleaning and Harmonization.html#section",
    "href": "Pages/Cleaning and Harmonization.html#section",
    "title": "Cleaning and Validation",
    "section": "",
    "text": "Step #1: Compress similar addresses using stringdist() to generate a connected component of similar strings, and then Depth-First Search (DFS) to aggregate nearest neighbors. Randomly select one of the address variations to proceed with.\nStep #2: Validate the address using the USPS Address 3.0 API to correct the address. This is time consuming, but is important to do before the following steps, as invalid addresses draw errors.\nStep #3: Validate the longitude and latitude associated with an address using the US Census Bureau’s Geocoder API.\nStep #4: Associate PO Box with physical addresses and identify moves based on longitude/latitude nearness by clustering their geolocation.\nStep #5: Using the street address (and for PO Boxes, the associated street address defined in the previous step) add the census tract and county for the 2000, 2010, and 2020 decennial years also using the US Census Bureau’s Geocoder API. This should improve accuracy when calculating metrics over different decennial years and mitigate map projection mismatching."
  },
  {
    "objectID": "Pages/Metric Calculation.html",
    "href": "Pages/Metric Calculation.html",
    "title": "Metric Calculations",
    "section": "",
    "text": "THIS PAGES IS IN PROGRESS\n\n\n\n\n\n\nPersistence\n\nmethod = “lookahead” – the original method the team used. Entries that ended with a 1 OR was open during the date range AND after the date range was determined to be persistent.\nmethod = “ratio” – the new method I proposed. This function calculates the persistence ratio of a church being open in a subset period compared to the full span of time recorded.\n\nClosures\n\nThe previous string detection mechanism did not correctly label all simulated strings of 20 years of responses. Also did not county occurrences, only binary detection.\nModified the string detection functions to be more robust; i.e. does not classify “00000100000” as a closure, since reopening’s must be two consecutive 1’s.\n\nReopening’s\n\nReopening’s were defined but did not seem to be calculated. Also used to give the closures count to contain the reopening’s outcome so they make sense relative to each other; i.e. reopening can only be one less or the same as number of closures.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Dynamically visualize data from Data Axle to display four metrics related to church closures at the tract level over various date ranges. Include ‘snapshot’ views of socioeconomic information about the areas alongside the church closure metrics."
  },
  {
    "objectID": "index.html#project-goals",
    "href": "index.html#project-goals",
    "title": "Overview",
    "section": "Project Goals",
    "text": "Project Goals\n\nReview the existing data cleaning, validation, and harmonization procedures employed by Dr. Insang Song for accuracy and identify opportunities for improvement.\nImplement the improvements as appropriate to prepare the dataset for analysis.\nCalculate the metrics for dynamic visualization as required.\n\nRefer to the pages in the top right of the navigation bar for the findings addressing each of these concerns."
  },
  {
    "objectID": "index.html#important-links-and-locations",
    "href": "index.html#important-links-and-locations",
    "title": "Overview",
    "section": "Important Links and Locations",
    "text": "Important Links and Locations\nIn accordance with the Data Use Agreement for this dataset, some repositories may not be publicly accessible or may contain local files that are not tracked by Git and or included on GitHub. Complete copies of the data and summary results can be accessed in the ‘SOCAH LAB\\Church closing\\Raw data’ folder on Yale’s OneDrive.\nActive dashboard: Closed Churches in the US\nOriginal GitHub Repo by Dr. Song: sigmafelix/healthreligion_project\nSource for Dashboard Map Code: ysph-dsde/church-closures"
  },
  {
    "objectID": "Pages/Review.html",
    "href": "Pages/Review.html",
    "title": "Review the Existing Process",
    "section": "",
    "text": "The purpose of this page is to provide an understanding of the challenges associated with the data and to identify opportunities for data validation or cleaning. Therefore, we do not need to be concerned with evaluating every case."
  },
  {
    "objectID": "Pages/Review.html#raw-data-dictionary",
    "href": "Pages/Review.html#raw-data-dictionary",
    "title": "Review the Existing Process",
    "section": "Raw Data Dictionary",
    "text": "Raw Data Dictionary\nFile name: church_wide_form_071723.csv\nNumber of rows: 2,601,599\nNumber of columns: 31\n\nabi: American Business Identifier (ABI): The unique identifier for each business, used to associate addresses with a specific organization.\nyear_established: Indicates the year the business was first established.\nstate: The state associated with the address.\ncity: The city associated with the address.\nzipcode: The five-digit ZIP code associated with the address.\naddress_line_1: The primary address line associated with the ABI entry.\nprimary_naics_code: This dataset combines the six-digit 2022 vintage North American Industry Classification System (NAICS) code and a two-digit proprietary code from Data Axle. The two-digit Data Axle code provides additional classification details, but this specific encoding was not supplied.\nnaics8_descriptions: All entries have NAICS = 813110, indicating they are classified as ‘Religious Organizations’, which includes churches, shrines, monasteries (except schools), synagogues, mosques, and temples. The two-digit Data Axle code provides additional classification details, but this specific encoding was not supplied.\nlongitude and latitude: Given as two columns. Provides the geolocation associated with the address listed in that row.\n2001 to 2021: Create one column for each year from 2001 to 2021. Report NA for no response received and 1 for a response received."
  },
  {
    "objectID": "Pages/Review.html#reduplicate-abis",
    "href": "Pages/Review.html#reduplicate-abis",
    "title": "Review the Existing Process",
    "section": "Reduplicate ABI’s",
    "text": "Reduplicate ABI’s\nSince ABIs are used to uniquely identify entries, we need to ensure that there are no reduplicates.\n\nduplicated(church_wide$abi) %&gt;% table()\n\n\n\n               \n1  TRUE 1647336\n2 FALSE  954263\n\n\nIt appears that there may be several entries containing reduplicated information, impacting as many as 577727 unique ABIs. We examine each unique ABI that may potentially be reduplicated in the following ways:\n\nConfirm that the date binaries are mutually exclusive.\nEnsure that the zipcode remains consistent.\nVerify that the other metadata are consistent: year_established, state, city, primary_naics_code, and naics8_descriptions.\nCheck that the longitude and latitude are within acceptable error margins of each other.\n\n\n\nShow the code\nsearch_space &lt;- church_wide$abi[duplicated(church_wide$abi)] %&gt;% unique()\n\n# Add a progress bar to show where the function is in the for loop.\npb = txtProgressBar(min = 0, max = length(search_space), style = 3)\n\nresult &lt;- NULL\nfor(i in 1:length(search_space)) {\n  # Subset to show only the entries associated with one duplicated ABI.\n  subset &lt;- church_wide[church_wide$abi %in% search_space[i], ]\n\n  # 1. Confirm the date binaries are mutually exclusive. A passing result will\n  #    say \"TRUE\".\n  test_1 &lt;- sapply(subset[, 11:31], function(x) sum(x, na.rm = TRUE)) %!in% c(0, 1) %&gt;% any() == FALSE\n\n\n  # 2. Confirm the other metadata are consistent. This is excluding the\n  #    longitude and latitude values.\n\n  # Same zip code? A passing result will say \"TRUE\".\n  test_2a &lt;- subset$zipcode %&gt;% unique() %&gt;% length() == 1\n\n  # All duplicated entries metadata are same? A passing result will say \"TRUE\".\n  test_2b &lt;- subset[, c(\"year_established\", \"state\", \"city\", \"primary_naics_code\", \"naics8_descriptions\")] %&gt;%\n    unique() %&gt;% nrow() == 1\n\n\n  # 3. Confirm the longitude and latitude are within error of each other. A\n  #    passing result will say \"TRUE\".\n  test_3 &lt;- max(subset$longitude) - min(subset$longitude) &lt; 1 & max(subset$latitude) - min(subset$latitude) &lt; 1\n\n  result &lt;- rbind(result, cbind(search_space[i], test_1, test_2a, test_2b, test_3))\n\n  # Print the for loop's progress.\n  setTxtProgressBar(pb, i)\n}\n\n# Commit result with reformatting.\nresult &lt;- result %&gt;% as.data.frame() %&gt;%\n  `colnames&lt;-`(c(\"abi\", \"Exclusive\", \"Zip_Same\", \"Metadata_Same\", \"LonLat_Similar\"))\n\n# Convert results from binary back to logical.\nresult[, -1] &lt;- apply(result[, -1], 2, function(x) as.logical(x))\n\n# Save the result.\nwrite.csv(result, \"Data/Results/KEEP LOCAL/From Explore the Raw Data/ABI Duplicates Test_05.16.2025.csv\")\n\n\n\nMutually Exclusive Dates\nEach duplicated ABI reports unique binary records for every column-year, summing to 0 or 1.\n\n\n              \n1  TRUE 577727\n2 FALSE      0\n\n\n\n\nMoves vs. Reduplications\nTo appropriately evaluate the remaining three conditions listed above, we need to differentiate variations resulting from explainable sources, such as moves, or errors in data reporting. The primary suspicion is that the detected reduplications arise from alternative addresses associated with the ABIs over a 20-year span.\nBelow are summary tables showing the different combinations of the remaining three conditions listed above:\n\n\nCounts of Reduplicated ABIs\n\n\n, , Long/Lat = FALSE\n\n        Zip Code\nMetadata FALSE TRUE\n   FALSE  1047    9\n   TRUE      2  134\n\n, , Long/Lat = TRUE\n\n        Zip Code\nMetadata FALSE   TRUE\n   FALSE 49634 187570\n   TRUE  27073 309950\n\n\n\nPercentages of Reduplicated ABI’s\n\n\n, , Long/Lat = FALSE\n\n        Zip Code\nMetadata FALSE TRUE\n   FALSE  0.18 0.00\n   TRUE   0.00 0.02\n\n, , Long/Lat = TRUE\n\n        Zip Code\nMetadata FALSE  TRUE\n   FALSE  8.59 32.47\n   TRUE   4.69 53.65\n\n\n\n\n\n\n\nWe expect the following results if certain combinations of assumptions are validated:\n\nLonLat_Similar, Zip_Same, Metadata_Same = TRUE: The church has not moved, no alternative address outside of the reported zip code was used (e.g., PO Box), and the other metadata did not change. This implies that the only variation detected comes from the address_line_1 entry, and no special considerations are required.\nResults: Approximately 54% of unique ABIs with more than one associated entry apply, accounting for 33% of all unique ABIs. About 5% of these ABIs have at least one PO Box associated with them, which is nearly half of all ABI’s with a PO Box detected.\nLonLat_Similar, Zip_Same = TRUE and Metadata_Same = FALSE: The church has not significantly moved. This indicates that something other than the address_line_1 variable (e.g., year_established, state, city, primary_naics_code, or naics8_descriptions) has varied. Since multiple metadata fields are batched together, it is possible that variations arise from errors or different addresses being associated with a business without constituting a significant move. The source of this variation will be further explored to ensure completeness.\nResults: Approximately 33% of unique ABIs with more than one associated entry apply, accounting for 20% of all unique ABIs. About 2% of these ABIs have at least one PO Box associated with them.\nLonLat_Similar, Metadata_Same = TRUE and Zip_Same = FALSE: This issue can be attributed to two explainable scenarios: either the move was small but resulted in a new zip code, or one of the addresses used a PO Box with a different zip code but the same latitude and longitude as a nearby address. Additionally, there might have been a typographical error in the zip code.\nResults: Almost 5% of unique ABIs with more than one associated entry apply, accounting for almost 3% of all unique ABIs. About 1.4% of these ABIs have at least one PO Box associated with them.\nLonLat_Similar = TRUE and Zip_Same, Metadata_Same = FALSE: This issue could also be related to small moves that are not detected by the geolocation change threshold but result in a change of the city, zip code, or possibly even the state. The source of this variation will be further investigated, but it is expected to be addressed in the same manner as the second or third combinations of assumptions.\nResults: Almost 9% of unique ABIs with more than one associated entry apply, accounting for 5.2% of all unique ABIs. Almost 2% of these ABIs have at least one PO Box associated with them.\nLonLat_Similar = FALSE and Zip_Same, Metadata = TRUE: It is unlikely that there would be a significant move without a change in the zip code and other metadata, such as the city or state. It is also possible that non-physical addresses, like PO Boxes, are contributing to this outcome. These are rare occurrences and will be investigated individually to assess for typographical errors.\nResults: 0.02% of unique ABIs with more than one associated entry apply, accounting for about 0.01% of all unique ABIs. 0.004% of these ABIs have at least one PO Box associated with them.\nLonLat_Similar, Zip_Same, Metadata = FALSE: These entries are most likely associated with a significant move out of the area and will be treated in the same manner as the fifth combination of assumptions. Their zip codes and other metadata might also contain typographical errors that will need to be assessed for completeness.\nResults: 0.18% of unique ABIs with more than one associated entry apply, accounting for about 0.11% of all unique ABIs. 0.03% of these ABIs have at least one PO Box associated with them.\nLonLat_Similar, Metadata = FALSE and Zip_Same = TRUE OR LonLat_Similar, Zip_Same = FALSE and Metadata = TRUE: These results suggest significant moves, yet no change in either the zip code or other metadata. While it is plausible that the zip code might remain the same, it is unusual for none of the address entries to change. These are rare occurrences and will be investigated individually to assess for typographical errors.\nResults: 0.002% of unique ABIs with more than one associated entry apply, accounting for about 0.001% of all unique ABIs. 0.001% of these ABIs have at least one PO Box associated with them.\n\n\n\n\nBelow are graphs showing the distribution of representation across the seven different assumptions listed above. We observe that most outcomes fall into the categories of small or no moves, with over half of the data not indicating any typographical errors. A significant percentage of unique ABIs with at least one PO Box included are also represented in the first two conditions, following the same patterns as the left graph.\n\n\n\n\n\n\n\n\n\n\n\n\nTypographical errors are most likely attributable to the last three combinations of assumptions. Fortunately, most entries appear to meet superficial expectations, but it is clear that more work is needed to validate the entries and ensure accuracy."
  },
  {
    "objectID": "Pages/Review.html#closer-look-at-assumptions-2",
    "href": "Pages/Review.html#closer-look-at-assumptions-2",
    "title": "Review the Existing Process",
    "section": "Closer Look at Assumptions #2",
    "text": "Closer Look at Assumptions #2\nAbove, we showed that the set of assumptions with LonLat_Similar, Zip_Same = TRUE and Metadata_Same = FALSE, covering 20% of the data, could be associated with typographical errors in the metadata. Other occurrences with Metadata_Same = FALSE (assumptions #4, #6, and #7) are likely related to typographical errors not necessarily associated with the metadata fields.\nThe metadata fields batched together included: year_established, state, city, primary_naics_code, and naics8_descriptions. All entries have naics8_descriptions = \"RELIGIOUS ORGANIZATIONS\", so this variable will be ignored. Since states and cities are most likely associated together, we will focus on the more granular variable, city.\n\n\nShow the code\n# Load in the pre-produced test results for evaluation.\nresult &lt;- read_csv(\"Data/Results/KEEP LOCAL/From Explore the Raw Data/ABI Duplicates Test_05.16.2025.csv\", \n                   col_types = cols(...1 = col_skip())) %&gt;% as.data.frame()\n\nsubset_2 &lt;- result[result$Zip_Same %in% TRUE & result$LonLat_Similar %in% TRUE & result$Metadata_Same %in% FALSE, ] %&gt;%\n  `rownames&lt;-`(NULL)\n\nsearch_space &lt;- subset_2$abi\n\n# Add a progress bar to show where the function is in the for loop.\npb = txtProgressBar(min = 0, max = length(search_space), style = 3)\n\nresult2 &lt;- NULL\nfor(i in 1:length(search_space)) {\n  # Subset to show only the entries associated with one reduplicated ABI.\n  subset &lt;- church_2[church_2$abi %in% search_space[i], ]\n\n  year_unique  &lt;- length(unique(subset$year_established)) == 1\n  state_unique &lt;- length(unique(subset$state)) == 1\n  city_unique  &lt;- length(unique(subset$city)) == 1\n  naics_unique &lt;- length(unique(subset$primary_naics_code)) == 1\n\n  result2 &lt;- rbind(result2, cbind(search_space[i], year_unique, state_unique, city_unique, naics_unique))\n\n  # Print the for loop's progress.\n  setTxtProgressBar(pb, i)\n}\n# Commit result with reformatting.\nresult2 &lt;- result2 %&gt;% as.data.frame() %&gt;%\n  `colnames&lt;-`(c(\"abi\", \"Year\", \"State\", \"City\", \"NAICS\"))\n\n# Convert results from binary back to logical.\nresult2[, -1] &lt;- apply(result2[, -1], 2, function(x) as.logical(x))\n\n# Save the result.\nwrite.csv(result2, \"Data/Results/KEEP LOCAL/From Explore the Raw Data/Metadata that Should Be the Same_05.18.2025.csv\")\n\n\nBelow are summary tables showing whether a specific metadata field varied for a given unique ABI that satisfied the assumptions LonLat_Similar, Zip_Same = TRUE and Metadata_Same = FALSE:\n\n\nABI Counts with Varying Metadata\n\n\n, , Year Established = FALSE\n\n       NAICS Code\nCity    FALSE   TRUE\n  FALSE   359  12926\n  TRUE   3490 130819\n\n, , Year Established = TRUE\n\n       NAICS Code\nCity    FALSE  TRUE\n  FALSE   694 31922\n  TRUE   7360     0\n\n\n\nPercentages ABI with Varying Metadata\n\n\n, , Year Established = FALSE\n\n       NAICS Code\nCity    FALSE  TRUE\n  FALSE  0.19  6.89\n  TRUE   1.86 69.74\n\n, , Year Established = TRUE\n\n       NAICS Code\nCity    FALSE  TRUE\n  FALSE  0.37 17.02\n  TRUE   3.92  0.00\n\n\n\n\nWe see that most (about 70%) of the results only vary with the ‘Year Established’ reporting. This variable is not considered important, so its source of variation will not be further explored, only noted.\n\n\n\n\n\n\nTHIS SECTION AND BELOW ARE IN PROGRESS"
  },
  {
    "objectID": "Pages/Review.html#po-boxs",
    "href": "Pages/Review.html#po-boxs",
    "title": "Review the Existing Process",
    "section": "PO Box’s",
    "text": "PO Box’s\nThe data processing summary provided by the team noted that all PO Boxes were removed prior to data processing. About 12% of all ABIs listed had at least one PO Box associated with an entry. As shown above, each row-wise entry associated with a given ABI supplies unique information. Therefore, we expect some skew to have been introduced due to this method.\n\npoBox_all &lt;- church_wide[str_which(church_wide$address_line_1, \"(?i)PO Box|P O Box\"), ]\nround(length(unique(poBox_all$abi))/length(unique(church_wide$abi))*100, digits = 2)\n\nThe full extent of the skew is not evaluated here. However, the following are two examples comparing the summary results produced using the previous method with the raw data.\nExample #1:\nReported year first observed: 2003\nReported year last observed: 2021\n\n\n        abi 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013\n1 10xxxxx91    1    1   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n2 10xxxxx91   NA   NA    1    1    1   NA   NA   NA   NA   NA   NA   NA   NA\n3 10xxxxx91   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n4 10xxxxx91   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n5 10xxxxx91   NA   NA   NA   NA   NA    1    1    1    1    1    1    1    1\n6 10xxxxx91   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n  2014 2015 2016 2017 2018 2019 2020 2021\n1   NA   NA   NA   NA   NA   NA   NA   NA\n2   NA   NA   NA   NA   NA   NA   NA   NA\n3   NA   NA   NA   NA   NA    1    1    1\n4   NA   NA   NA    1   NA   NA   NA   NA\n5    1    1    1   NA   NA   NA   NA   NA\n6   NA   NA   NA   NA    1   NA   NA   NA\n\n\nExample #2:\nReported year first observed: 2015\nReported year last observed: 2015\n\n\n        abi 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013\n1 10xxxxx22   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n2 10xxxxx22    1    1    1    1    1    1    1    1    1    1    1    1    1\n  2014 2015 2016 2017 2018 2019 2020 2021\n1   NA    1   NA   NA   NA   NA   NA   NA\n2    1   NA   NA   NA   NA   NA   NA   NA"
  }
]